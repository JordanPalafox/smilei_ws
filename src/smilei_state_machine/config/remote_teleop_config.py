#!/usr/bin/env python3
"""
Configuraci√≥n para teleoperaci√≥n remota entre dos computadoras.

Este archivo permite configurar las direcciones IP y puertos para la comunicaci√≥n UDP
entre dos m√°quinas ejecutando el sistema SMILEi.

Configuraci√≥n de Red:
- LOCAL_IP: IP de esta m√°quina
- REMOTE_IP: IP de la m√°quina remota
- SEND_PORT: Puerto para enviar datos
- RECEIVE_PORT: Puerto para recibir datos

Configuraci√≥n de Motores:
- MOTOR_IDS: Lista de IDs de motores a controlar
- LEADER_MOTOR_COUNT: N√∫mero de motores l√≠deres (primera mitad de la lista)

Uso:
1. Copie este archivo a ambas m√°quinas
2. Modifique las IPs seg√∫n su red
3. Aseg√∫rese de que los puertos est√©n abiertos en el firewall
4. Execute el estado 'remote_teleoperation' en ambas m√°quinas
"""

# ================================
# CONFIGURACI√ìN DE RED
# ================================

# M√°quina A (ejemplo: Computadora principal)
LOCAL_IP_A = '192.168.4.241'
REMOTE_IP_A = '192.168.4.238'  # Cambiar XXX por la IP de la m√°quina B

# M√°quina B (ejemplo: Computadora secundaria)  
LOCAL_IP_B = '192.168.4.238'   # IP real de la m√°quina B
REMOTE_IP_B = '192.168.4.241'

# Puertos UDP (deben ser diferentes para evitar conflictos)
SEND_PORT = 5005
RECEIVE_PORT = 4000

# ================================
# CONFIGURACI√ìN ACTUAL
# ================================
# Cambie estos valores seg√∫n la m√°quina actual

# Para M√°quina A (192.168.4.241):
LOCAL_IP = '192.168.4.241'   # Esta m√°quina
REMOTE_IP = '192.168.4.238'  # M√°quina remota

# Para M√°quina B (descomente las siguientes l√≠neas):
# LOCAL_IP = LOCAL_IP_B
# REMOTE_IP = REMOTE_IP_B

# ================================
# CONFIGURACI√ìN DE MOTORES
# ================================

# IDs de motores a controlar (m√°ximo 8)
# MOTOR_IDS = [1, 2, 3, 4, 5, 6, 7, 8]  # Configuraci√≥n completa

# Para prueba con un motor por m√°quina:
MOTOR_IDS = [1]  # Solo motor ID=1

# ================================
# CONFIGURACI√ìN DE CONTROL
# ================================

# Ganancias de control (PD)
CONTROL_GAINS = {
    'kp': [1.75] * 8,  # Ganancia proporcional para cada motor
    'kd': [0.1] * 8,   # Ganancia derivativa para cada motor
}

# L√≠mites de seguridad para cada motor (min, max) en radianes
POSITION_LIMITS = [
    (-1.58, 1.58),    # Motor 1
    (-0.79, 1.58),    # Motor 2  
    (-3.1416, 1.58),  # Motor 3
    (-0.18, 1.16),    # Motor 4
    (-1.58, 1.58),    # Motor 5
    (-1.58, 0.79),    # Motor 6
    (-1.58, 3.1416),  # Motor 7
    (-1.16, 0.18)     # Motor 8
]

# ================================
# CONFIGURACI√ìN DE COMUNICACI√ìN
# ================================

# Timeout para sockets UDP (segundos)
SOCKET_TIMEOUT = 0.001

# M√°ximo n√∫mero de errores de comunicaci√≥n antes de terminar
MAX_COMMUNICATION_ERRORS = 10

# Frecuencia de control (Hz)
CONTROL_FREQUENCY = 1000  # 1 kHz como en el c√≥digo original

# ================================
# FUNCIONES DE CONFIGURACI√ìN
# ================================

def get_network_config():
    """Retorna la configuraci√≥n de red actual"""
    return {
        'local_ip': LOCAL_IP,
        'remote_ip': REMOTE_IP,
        'send_port': SEND_PORT,
        'receive_port': RECEIVE_PORT,
        'socket_timeout': SOCKET_TIMEOUT
    }

def get_motor_config():
    """Retorna la configuraci√≥n de motores"""
    return {
        'motor_ids': MOTOR_IDS,
        'control_gains': CONTROL_GAINS,
        'position_limits': POSITION_LIMITS
    }

def get_communication_config():
    """Retorna la configuraci√≥n de comunicaci√≥n"""
    return {
        'max_errors': MAX_COMMUNICATION_ERRORS,
        'control_frequency': CONTROL_FREQUENCY
    }

def validate_config():
    """Valida la configuraci√≥n"""
    errors = []
    
    # Validar IPs
    if LOCAL_IP == REMOTE_IP:
        errors.append("LOCAL_IP y REMOTE_IP no pueden ser iguales")
    
    # Validar motores
    if len(MOTOR_IDS) == 0:
        errors.append("MOTOR_IDS no puede estar vac√≠o")
    
    if len(MOTOR_IDS) > 8:
        errors.append("M√°ximo 8 motores soportados")
    
    # Validar ganancias
    if len(CONTROL_GAINS['kp']) != len(MOTOR_IDS):
        errors.append("N√∫mero de ganancias kp debe coincidir con n√∫mero de motores")
    
    if len(CONTROL_GAINS['kd']) != len(MOTOR_IDS):
        errors.append("N√∫mero de ganancias kd debe coincidir con n√∫mero de motores")
    
    # Validar l√≠mites
    if len(POSITION_LIMITS) < len(MOTOR_IDS):
        errors.append("Debe haber l√≠mites de posici√≥n para cada motor")
    
    return errors

def print_config_summary():
    """Imprime un resumen de la configuraci√≥n"""
    print("=== CONFIGURACI√ìN DE TELEOPERACI√ìN REMOTA ===")
    print(f"IP Local: {LOCAL_IP}")
    print(f"IP Remota: {REMOTE_IP}")
    print(f"Puerto Env√≠o: {SEND_PORT}")
    print(f"Puerto Recepci√≥n: {RECEIVE_PORT}")
    print(f"Motores: {MOTOR_IDS}")
    print(f"Frecuencia Control: {CONTROL_FREQUENCY} Hz")
    
    errors = validate_config()
    if errors:
        print("\n‚ö†Ô∏è  ERRORES DE CONFIGURACI√ìN:")
        for error in errors:
            print(f"  - {error}")
    else:
        print("\n‚úÖ Configuraci√≥n v√°lida")
    print("=" * 45)

# ================================
# EJEMPLO DE USO
# ================================

if __name__ == "__main__":
    print_config_summary()
    
    # Mostrar configuraci√≥n para ambas m√°quinas
    print("\n=== CONFIGURACI√ìN PARA M√ÅQUINA A ===")
    print(f"LOCAL_IP = '{LOCAL_IP_A}'")
    print(f"REMOTE_IP = '{REMOTE_IP_A}'")
    
    print("\n=== CONFIGURACI√ìN PARA M√ÅQUINA B ===")
    print(f"LOCAL_IP = '{LOCAL_IP_B}'")
    print(f"REMOTE_IP = '{REMOTE_IP_B}'")
    
    print("\nüìù INSTRUCCIONES:")
    print("1. Copie este archivo a ambas m√°quinas")
    print("2. En cada m√°quina, modifique LOCAL_IP y REMOTE_IP seg√∫n corresponda")
    print("3. Aseg√∫rese de que los puertos est√©n abiertos en el firewall")
    print("4. Execute el estado 'remote_teleoperation' en ambas m√°quinas")
    print("5. Un motor en cada m√°quina replicar√° el movimiento del otro")